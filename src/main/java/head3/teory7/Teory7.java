package head3.teory7;


/**
 * Анонимный внутренний класс (AIC) может использоваться для создания подкласса абстрактного класса или конкретного класса.
 * AIC также может обеспечить конкретную реализацию интерфейса, включая добавление состояния (полей). На экземпляр AIC можно
 * ссылаться, используя thisего тела методов, поэтому на нем можно вызывать дальнейшие методы, его состояние может мутировать
 * с течением времени и т. Д. Ни один из них не относится к лямбдам.
 *
 * Большинство применений AICS заключались в предоставлении реализаций отдельных функций без состояния
 * и поэтому могут быть заменены лямбда-выражениями, но есть и другие виды использования AICS, для которых лямбды не могут
 * быть использованы.
 *
 * Еще одно различие между AICS и лямбда-выражениями заключается в том, что AICS вводят новую область видимости.
 * То есть имена разрешаются из суперклассов и интерфейсов AIC и могут затенять имена, которые встречаются в
 * лексически заключающей среде. Для лямбд все имена разрешаются лексически.
 */
public class Teory7 {
    //AIC
    public static void main(String[] args) {
        final int cnt = 0;
        Runnable r = new Runnable() {
            @Override
            public void run() {
                int cnt = 5;
                System.out.println("in run" + cnt);
            }
        };

        Thread t = new Thread(r);
        t.start();
    }

    //Lambda
   /* public static void main(String[] args) {
        final int cnt = 0;
        Runnable r = ()->{
            int cnt = 5; //compilation error
            System.out.println("in run"+cnt);};
        Thread t = new Thread(r);
        t.start();
    }*/
}




//https://stackoverflow.com/questions/22637900/java8-lambdas-vs-anonymous-classes